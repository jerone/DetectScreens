<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DetectScreens</name>
    </assembly>
    <members>
        <member name="T:DetectScreens.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DetectScreens.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DetectScreens.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DetectScreens.Properties.Resources.Program_Main_CompositionNotEnabled">
             <summary>
               Looks up a localized string similar to This program needs Aero Glass, but it seems to be disabled. Click &apos;OK&apos; to still open the program.
            
            Warning: crashes may occur. Try at your own risk..
             </summary>
        </member>
        <member name="P:DetectScreens.Properties.Resources.Program_Main_CompositionNotEnabled_Title">
            <summary>
              Looks up a localized string similar to Aero Glass disabled.
            </summary>
        </member>
        <member name="P:DetectScreens.Properties.Resources.Program_Main_OSVistaOrHigher">
             <summary>
               Looks up a localized string similar to Your Operating System is not supported by this program. Try it on Windows Vista, Windows 7 and higher. Click &apos;OK&apos; to still open the program.
            
            Warning: crashes may occur. Try at your own risk..
             </summary>
        </member>
        <member name="P:DetectScreens.Properties.Resources.Program_Main_OSVistaOrHigher_Title">
            <summary>
              Looks up a localized string similar to OS not supported.
            </summary>
        </member>
        <member name="T:DetectScreens.Store.FrmDetectScreens">
            <summary>
            DetectScreens;
            </summary>
        </member>
        <member name="M:DetectScreens.Store.FrmDetectScreens.#ctor">
            <summary>
            DetectScreens form;
            </summary>
        </member>
        <member name="M:DetectScreens.Store.FrmDetectScreens.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Form.Load"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:DetectScreens.Store.FrmDetectScreens.OnShown(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Form.Shown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:DetectScreens.Store.FrmDetectScreens.WndProc(System.Windows.Forms.Message@)">
            <summary>
            The Windows System.Windows.Forms.Message.
            </summary>
            <param name="m">The Windows <see cref="T:System.Windows.Forms.Message"/> to process. </param>
        </member>
        <member name="M:DetectScreens.Store.FrmDetectScreens.BtnPreviewClick(System.Object,System.EventArgs)">
            <summary>
            Click event for show preview windows;
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DetectScreens.Store.FrmDetectScreens.BtnResolutionClick(System.Object,System.EventArgs)">
            <summary>
            Click event for showing Windows Resolution window;
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DetectScreens.Store.FrmDetectScreens.MouseIsOnGlass(System.Int32)">
            <summary>
            Detect if mouse cursor is above the glass part;
            </summary>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="F:DetectScreens.Store.FrmDetectScreens.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:DetectScreens.Store.FrmDetectScreens.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:DetectScreens.Store.FrmDetectScreens.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:DetectScreens.Controls.DisplayWindowManager">
            <summary>
            Control that combines Displays and Windows;
            </summary>
        </member>
        <member name="F:DetectScreens.Controls.DisplayWindowManager.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:DetectScreens.Controls.DisplayWindowManager.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DetectScreens.Controls.DisplayWindowManager.#ctor">
            <summary>
            Control that combines Displays and Windows;
            </summary>
        </member>
        <member name="M:DetectScreens.Controls.DisplayWindowManager.WndProc(System.Windows.Forms.Message@)">
            <summary>
            The Windows System.Windows.Forms.Message.
            </summary>
            <param name="m">The Windows System.Windows.Forms.Message to process.</param>
        </member>
        <member name="M:DetectScreens.Controls.DisplayWindowManager.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources (other than memory) used by the System.Windows.Forms.Form.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:DetectScreens.Factory.Display">
            <summary>
            Class for a computer display;
            </summary>
        </member>
        <member name="M:DetectScreens.Factory.Display.#ctor">
            <summary>
            Make a computer display;
            </summary>
        </member>
        <member name="M:DetectScreens.Factory.Display.HasWindow(DetectScreens.Factory.Window)">
            <summary>
            Determains if the display contains a window;
            </summary>
            <param name="window">The window to check for;</param>
            <returns>true when the display contains that window. Otherwise false;</returns>
        </member>
        <member name="M:DetectScreens.Factory.Display.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:DetectScreens.Factory.Display.Finalize">
            <summary>
            Allows an <see cref="T:System.Object"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Display.Left">
            <summary>
            Display left;
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Display.Right">
            <summary>
            Display right;
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Display.Top">
            <summary>
            Display top;
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Display.Bottom">
            <summary>
            Display bottom;
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Display.Width">
            <summary>
            Display width;
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Display.Height">
            <summary>
            Display height;
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Display.Bounds">
            <summary>
            Display bounds;
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Display.Identifier">
            <summary>
            Display number;
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Display.Primairy">
            <summary>
            Main Display;
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Display.Windows">
            <summary>
            List of all windows;
            </summary>
        </member>
        <member name="T:DetectScreens.Factory.Displays">
            <summary>
            List of all display's;
            </summary>
        </member>
        <member name="M:DetectScreens.Factory.Displays.#ctor">
            <summary>
            List of Displays;
            </summary>
        </member>
        <member name="M:DetectScreens.Factory.Displays.#ctor(System.Boolean,System.Boolean)">
            <summary>
            List of all Displays;
            </summary>
            <param name="addDesktop">Add desktop too</param>
            <param name="addTaskbar">Add taskbar too</param>
        </member>
        <member name="M:DetectScreens.Factory.Displays.#ctor(System.Boolean)">
            <summary>
            List of all Displays;
            </summary>
            <param name="noWindows">Displays with or without Windows;</param>
        </member>
        <member name="M:DetectScreens.Factory.Displays.Paint">
            <summary>
            Paint all;
            </summary>
        </member>
        <member name="M:DetectScreens.Factory.Displays.Paint(System.Boolean,System.Boolean)">
            <summary>
            Paint Displays and/or Windows;
            </summary>
            <param name="paintDisplays">Paint Displays</param>
            <param name="paintWindows">Paint Windows</param>
        </member>
        <member name="M:DetectScreens.Factory.Displays.IntersectDisplay(DetectScreens.Factory.Window)">
            <summary>
            Returns a list of Displays where a window intersects with;
            </summary>
            <param name="window">Window to check for</param>
            <returns>A list of Displays</returns>
        </member>
        <member name="M:DetectScreens.Factory.Displays.WindowAdd(System.IntPtr)">
            <summary>
            Add window to all dispays;
            </summary>
            <param name="hwnd">Window handle</param>
        </member>
        <member name="M:DetectScreens.Factory.Displays.WindowMove(System.IntPtr)">
            <summary>
            Move window on all displays;
            </summary>
            <param name="hwnd">Window handle</param>
        </member>
        <member name="M:DetectScreens.Factory.Displays.WindowRemove(System.IntPtr)">
            <summary>
            Remove window on all displays;
            </summary>
            <param name="hwnd">Window handle</param>
        </member>
        <member name="M:DetectScreens.Factory.Displays.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:DetectScreens.Factory.Displays.WorkingArea">
            <summary>
            Calculate compleet working area;
            </summary>
            <returns>Working area</returns>
            <remarks>Gaps between displays are also calculated</remarks>
        </member>
        <member name="M:DetectScreens.Factory.Displays.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:DetectScreens.Factory.Displays.Finalize">
            <summary>
            Allows an <see cref="T:System.Object"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Displays.Scale">
            <summary>
            Scale of the displays;
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Displays.Opacity">
            <summary>
            Display opacity;
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Displays.Offset">
            <summary>
            Display offset;
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Displays.Handler">
            <summary>
            Handler to form;
            </summary>
            <remarks>Used in Dwm Thunmbnails</remarks>
        </member>
        <member name="P:DetectScreens.Factory.Displays.Graphics">
            <summary>
            Paint graphics;
            </summary>
        </member>
        <member name="T:DetectScreens.Factory.Window">
            <summary>
            Class for program windows;
            </summary>
        </member>
        <member name="F:DetectScreens.Factory.Window.Bounds">
            <summary>
            Window bounds;
            </summary>
        </member>
        <member name="M:DetectScreens.Factory.Window.#ctor(System.IntPtr)">
            <summary>
            Make a program window;
            </summary>
            <param name="handle">Window handle;</param>
        </member>
        <member name="M:DetectScreens.Factory.Window.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:DetectScreens.Factory.Window.Unregister">
            <summary>
            Removes the Dwm Thumbnail;
            </summary>
            <returns>Success</returns>
        </member>
        <member name="M:DetectScreens.Factory.Window.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:DetectScreens.Factory.Window.Finalize">
            <summary>
            Allows an <see cref="T:System.Object"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Window.Handle">
            <summary>
            Window handle;
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Window.Maximized">
            <summary>
            Indicates if a window is maximized;
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Window.Thumb">
            <summary>
            Used by Dwm Thumbnail API;
            </summary>
        </member>
        <member name="P:DetectScreens.Factory.Window.Title">
            <summary>
            Window caption;
            </summary>
        </member>
        <member name="T:DetectScreens.Factory.Desktop">
            <summary>
            Class for the desktop;
            </summary>
        </member>
        <member name="M:DetectScreens.Factory.Desktop.#ctor">
            <summary>
            Create a desktop;
            </summary>
        </member>
        <member name="T:DetectScreens.Factory.Taskbar">
            <summary>
            Class for the taskbar;
            </summary>
        </member>
        <member name="M:DetectScreens.Factory.Taskbar.#ctor">
            <summary>
            Create a taskbar;
            </summary>
        </member>
        <member name="T:DetectScreens.Factory.Windows">
            <summary>
            List of all windows;
            </summary>
        </member>
        <member name="M:DetectScreens.Factory.Windows.#ctor">
            <summary>
            A list of all Windows;
            </summary>
        </member>
        <member name="M:DetectScreens.Factory.Windows.#ctor(System.Boolean,System.Boolean)">
            <summary>
            A list of all Windows;
            </summary>
            <param name="addDesktop">Include the desktop too</param>
            <param name="addTaskbar">Include the taskbar too</param>
        </member>
        <member name="M:DetectScreens.Factory.Windows.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:DetectScreens.Factory.Windows.Add(System.IntPtr)">
            <summary>
            Add a window;
            </summary>
            <param name="hwnd">Window handle</param>
        </member>
        <member name="M:DetectScreens.Factory.Windows.Move(System.IntPtr)">
            <summary>
            Move a window;
            </summary>
            <param name="hwnd">Window handle</param>
        </member>
        <member name="M:DetectScreens.Factory.Windows.Remove(System.IntPtr)">
            <summary>
            Remove a window;
            </summary>
            <param name="hwnd">Window handle</param>
        </member>
        <member name="M:DetectScreens.Factory.Windows.Unregister">
            <summary>
            Remove all Dwm Thumbnails;
            </summary>
            <returns></returns>
        </member>
        <member name="M:DetectScreens.Factory.Windows.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:DetectScreens.Factory.Windows.Finalize">
            <summary>
            Allows an <see cref="T:System.Object"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:DetectScreens.Store.FrmIdentify">
            <summary>
            Overlay identifier for each monitor;
            </summary>
        </member>
        <member name="F:DetectScreens.Store.FrmIdentify.BORDER">
            <summary>
            Border size;
            </summary>
        </member>
        <member name="F:DetectScreens.Store.FrmIdentify.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:DetectScreens.Store.FrmIdentify.BorderColor">
            <summary>
            Color of the border;
            </summary>
        </member>
        <member name="M:DetectScreens.Store.FrmIdentify.#ctor">
            <summary>
            Overlay identifier for each monitor;
            </summary>
        </member>
        <member name="M:DetectScreens.Store.FrmIdentify.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:DetectScreens.Store.FrmIdentify.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint event;
            </summary>
            <param name="e">A System.Windows.Forms.PaintEventArgs that contains the event data;</param>
        </member>
        <member name="M:DetectScreens.Store.FrmIdentify.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="P:DetectScreens.Store.FrmIdentify.Nr">
            <summary>
            Number of the monitor to display;
            </summary>
        </member>
        <member name="T:DetectScreens.Factory.Win32.HSHELL">
            <summary>
            ShellProc
            </summary>
            <remarks>http://msdn.microsoft.com/en-us/library/ms644991%28v=vs.85%29.aspx</remarks>
        </member>
        <member name="T:DetectScreens.Factory.Win32.SW">
            <summary>
            Set Window Position Flags
            </summary>
            <remarks>http://www.pinvoke.net/default.aspx/user32/SetWindowPos.html</remarks>
        </member>
        <member name="T:DetectScreens.Factory.Win32.WM">
            <summary>
            Windows Messages
            </summary>
            <remarks>http://www.pinvoke.net/default.aspx/Constants/WM.html</remarks>
        </member>
        <member name="T:DetectScreens.Factory.Win32.HT">
            <summary>
            Window HitTest Regions
            </summary>
            <remarks>http://www.pinvoke.net/default.aspx/Enums/WindowHitTestRegions.html</remarks>
        </member>
        <member name="M:DetectScreens.Program.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:DetectScreens.Factory.Utilities">
            <summary>
            Class to extend .NET functionality;
            </summary>
        </member>
        <member name="M:DetectScreens.Factory.Utilities.Divide(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Divides a rectangle with an value;
            </summary>
            <param name="source">The rectangle;</param>
            <param name="divider">The divider;</param>
            <returns>A new rectangle divided by the <paramref name="divider"/>;</returns>
        </member>
        <member name="M:DetectScreens.Factory.Utilities.IsSingleInstance(System.String)">
            <summary>
            Checks of current window is already running;
            </summary>
            <param name="windowTitle">Window title</param>
            <returns>true if single instance, false if already running</returns>
        </member>
    </members>
</doc>
